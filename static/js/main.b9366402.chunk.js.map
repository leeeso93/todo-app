{"version":3,"sources":["components/TodoTemplate.js","components/TodoSearch.js","components/TodoInsert.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoSearch","keyword","onChange","type","placeholder","value","TodoInsert","onInsert","onSelect","useState","setValue","format","ticking","onSubmit","e","preventDefault","target","TodoItem","todos","onRemove","onToggle","onModify","id","text","checked","view","setView","cn","onClick","option","TodoList","map","key","App","setOption","setTodos","nextId","useRef","useCallback","data","nextData","current","length","alert","concat","filter","removeData","toggleData","setKeyword","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2WAYeA,G,kBARM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OACE,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,WAAWD,MCYjBE,EAfI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC7B,OACE,yBAAKH,UAAU,cACb,0BAAMA,UAAU,mBACd,2BACEI,KAAK,SACLC,YAAY,4BACZC,MAAOJ,EACPC,SAAUA,O,iCCsCLI,EA5CI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACnBC,mBAAS,IADU,mBACtCJ,EADsC,KAC/BK,EAD+B,KAa7C,OACE,yBAAKX,UAAU,cACb,wBAAIA,UAAU,aAAd,eACK,IACH,8BACG,kBAAC,IAAD,CAAOY,OAAQ,2CAAwBC,SAAS,MAIrD,yBAAKb,UAAU,oBACb,0BAAMA,UAAU,kBAAkBc,SAhBvB,SAAAC,GACfP,EAASF,GACTK,EAAS,IACTI,EAAEC,mBAcI,2BACEZ,KAAK,OACLE,MAAOA,EACPH,SAxBO,SAAAY,GACfJ,EAASI,EAAEE,OAAOX,QAwBVD,YAAY,wDAEd,4BAAQF,SAAUM,EAAUT,UAAU,gBACpC,4BAAQM,MAAM,iBAAd,iBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,iBAAd,kBAEF,4BAAQF,KAAK,UACX,kBAAC,IAAD,W,uCCoBGc,EAvDE,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACrCC,EAAsBJ,EAAtBI,GAAIC,EAAkBL,EAAlBK,KAAMC,EAAYN,EAAZM,QAD0C,EAElCf,mBAAS,IAFyB,mBAErDJ,EAFqD,KAE9CK,EAF8C,OAIpCD,oBAAS,GAJ2B,mBAIrDgB,EAJqD,KAI/CC,EAJ+C,KAa5D,OACE,yBAAK3B,UAAU,YACb,yBAAKA,UAAU,iBACb,yBACEA,UAAW4B,IAAG,yBAA0B,CAAEH,YAC1CI,QAAS,kBAAMR,EAASE,KAEvBE,EAAU,kBAAC,IAAD,MAAiB,kBAAC,IAAD,MAC5B,yBAAKzB,UAAU,yBACb,8BAAOwB,KAIX,yBAAKxB,UAAU,QACb,kBAAC,IAAD,CAAW6B,QAlBJ,SAAAd,GACbY,GAAQ,OAoBJ,yBAAK3B,UAAU,SAAS6B,QAAS,kBAAMT,EAASG,KAC9C,kBAAC,IAAD,QAGJ,yBAAKvB,UAAU,gBACb,0BAAMA,UAAU,UAAUmB,EAAMW,QAChC,yBAAK9B,UAAW0B,EAAO,WAAa,UAClC,2BAAOtB,KAAK,OAAOE,MAAOA,EAAOH,SAhCxB,SAAAY,GACfJ,EAASI,EAAEE,OAAOX,UAiCZ,4BACEF,KAAK,SACLJ,UAAU,MACV6B,QAAS,kBAAMP,EAASC,EAAIjB,KAH9B,gBAOA,4BAAQN,UAAU,MAAM6B,QAAS,kBAAMF,GAAQ,KAA/C,oBChCKI,G,MAhBE,SAAC,GAA6C,IAA3CZ,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC7C,OACE,yBAAKtB,UAAU,YACZmB,EAAMa,KAAI,SAAAb,GAAK,OACd,kBAAC,EAAD,CACEc,IAAKd,EAAMI,GACXJ,MAAOA,EACPC,SAAUA,EACVC,SAAUA,EACVC,SAAUA,U,yjBCLpB,IA0FeY,EA1FH,WAAM,MAEYxB,mBAAS,iBAFrB,mBAEToB,EAFS,KAEDK,EAFC,OAQUzB,mBAAS,CACjC,CACEa,GAAI,EACJC,KAAM,iGACNM,OAAQA,EACRL,SAAS,KAbG,mBAQTN,EARS,KAQFiB,EARE,KAiBVC,EAASC,iBAAO,GAGhB9B,EAAW+B,uBACf,SAAAC,GAEE,IAAMC,EAAW,CACflB,GAAIc,EAAOK,QACXlB,KAAMgB,EACNV,OAAQA,EACRL,SAAS,GAGS,IAAhBe,EAAKG,OACPC,MAAM,6DAENR,GAAS,SAAAjB,GAAK,OAAIA,EAAM0B,OAAOJ,MAC/BJ,EAAOK,SAAW,KAGtB,CAACZ,IAIGV,EAAWmB,uBAAY,SAAAhB,GAC3Ba,GAAS,SAAAjB,GAAK,OAAIA,EAAM2B,QAAO,SAAAC,GAAU,OAAIA,EAAWxB,KAAOA,UAC9D,IAGGF,EAAWkB,uBAAY,SAAAhB,GAC3Ba,GAAS,SAAAjB,GAAK,OACZA,EAAMa,KAAI,SAAAgB,GAAU,OAClBA,EAAWzB,KAAOA,EAAlB,KACSyB,EADT,CACqBvB,SAAUuB,EAAWvB,UACtCuB,UAGP,IAGG1B,EAAWiB,uBAAY,SAAChB,EAAIC,GAChCY,GAAS,SAAAjB,GAAK,OACZA,EAAMa,KAAI,SAAAgB,GAAU,OAClBA,EAAWzB,KAAOA,EAAlB,KAA4ByB,EAA5B,CAAwCxB,KAAMA,IAASwB,UAG1D,IA/Da,EAkEctC,mBAAS,IAlEvB,mBAkETR,EAlES,KAkEA+C,EAlEA,KAuEhB,OACE,oCAGE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAY3C,MAAOJ,EAASC,SATjB,SAAAY,GACfkC,EAAWlC,EAAEE,OAAOX,UAShB,kBAAC,EAAD,CAAYE,SAAUA,EAAUC,SA1ErB,SAAAM,GACfoB,EAAUpB,EAAEE,OAAOX,UA2Ef,kBAAC,EAAD,CACEa,MAAOA,EAAM2B,QAAO,SAAAN,GAAI,OAAIA,EAAKhB,KAAK0B,QAAQhD,IAAY,KAC1DoB,SAAUA,EACVF,SAAUA,EACVC,SAAUA,OChFA8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b9366402.chunk.js","sourcesContent":["//일정 템플릿 컴포넌트\r\nimport React from 'react';\r\nimport '../scss/TodoTemplate.scss';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n  return (\r\n    <div className=\"TodoTemplate layout\">\r\n      <div className=\"content\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoTemplate;\r\n","//일정 검색 컴포넌트\r\nimport React from 'react';\r\nimport '../scss/TodoSearch.scss';\r\n\r\nconst TodoSearch = ({ keyword, onChange }) => {\r\n  return (\r\n    <div className=\"TodoSearch\">\r\n      <form className=\"TodoSearch-form\">\r\n        <input\r\n          type=\"search\"\r\n          placeholder=\"빠른 검색\"\r\n          value={keyword}\r\n          onChange={onChange}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoSearch;\r\n","// 일정 입력 컴포넌트\r\nimport React, { useState } from 'react';\r\nimport { IoIosSend } from 'react-icons/io';\r\nimport '../scss/TodoInsert.scss';\r\nimport Clock from 'react-live-clock';\r\n\r\nconst TodoInsert = ({ onInsert, onSelect }) => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const onChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const onSubmit = e => {\r\n    onInsert(value);\r\n    setValue('');\r\n    e.preventDefault(); //새로고침 방지\r\n  };\r\n\r\n  return (\r\n    <div className=\"TodoInsert\">\r\n      <h1 className=\"app-title\">\r\n        오늘{' '}\r\n        <span>\r\n          {<Clock format={'YYYY 년 MM 월 DD 일 HH시'} ticking={true} />}\r\n        </span>\r\n      </h1>\r\n\r\n      <div className=\"TodoInsert-inner\">\r\n        <form className=\"TodoInsert-form\" onSubmit={onSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={onChange}\r\n            placeholder=\"할 일을 입력하세요.\"\r\n          />\r\n          <select onChange={onSelect} className=\"form-control\">\r\n            <option value=\"1순위\">1순위</option>\r\n            <option value=\"2순위\">2순위</option>\r\n            <option value=\"3순위\">3순위</option>\r\n          </select>\r\n          <button type=\"submit\">\r\n            <IoIosSend />\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","//실제 리스트 부분\r\nimport React, { useState } from 'react';\r\nimport { MdCheckBox, MdCheckBoxOutlineBlank } from 'react-icons/md';\r\nimport { FaRegEdit, FaTrashAlt } from 'react-icons/fa';\r\nimport '../scss/TodoItem.scss';\r\nimport cn from 'classnames';\r\n\r\nconst TodoItem = ({ todos, onRemove, onToggle, onModify }) => {\r\n  const { id, text, checked } = todos;\r\n  const [value, setValue] = useState('');\r\n\r\n  const [view, setView] = useState(false);\r\n  const onChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const onEdit = e => {\r\n    setView(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"TodoItem\">\r\n      <div className=\"TodoItem-main\">\r\n        <div\r\n          className={cn('checkbox text-truncate', { checked })}\r\n          onClick={() => onToggle(id)}\r\n        >\r\n          {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n          <div className=\"content text-truncate\">\r\n            <span>{text}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"edit\">\r\n          <FaRegEdit onClick={onEdit} />\r\n        </div>\r\n\r\n        <div className=\"remove\" onClick={() => onRemove(id)}>\r\n          <FaTrashAlt />\r\n        </div>\r\n      </div>\r\n      <div className=\"TodoItem-sub\">\r\n        <span className=\"option\">{todos.option}</span>\r\n        <div className={view ? 'edit-box' : 'd-none'}>\r\n          <input type=\"text\" value={value} onChange={onChange} />\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn\"\r\n            onClick={() => onModify(id, value)}\r\n          >\r\n            완료\r\n          </button>\r\n          <button className=\"btn\" onClick={() => setView(false)}>\r\n            닫기\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","//일정 리스트가 보이는 컴포넌트\r\nimport React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport '../scss/TodoList.scss';\r\n\r\nconst TodoList = ({ todos, onRemove, onToggle, onModify }) => {\r\n  return (\r\n    <div className=\"TodoList\">\r\n      {todos.map(todos => (\r\n        <TodoItem\r\n          key={todos.id}\r\n          todos={todos}\r\n          onRemove={onRemove}\r\n          onToggle={onToggle}\r\n          onModify={onModify}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useRef, useCallback } from 'react';\nimport '../src/scss/base.scss';\nimport '../src/scss/TodoSearch.scss';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoSearch from './components/TodoSearch';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n//import TodoHome from './components/TodoHome';\n\nconst App = () => {\n  //select 값(중요도)\n  const [option, setOption] = useState('1순위');\n  const onSelect = e => {\n    setOption(e.target.value);\n  };\n\n  //데이터 예제\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      text: '이렇게 메모앱을 작성하시면 됩니다.',\n      option: option,\n      checked: false,\n    },\n  ]);\n\n  const nextId = useRef(2);\n\n  //데이터 추가\n  const onInsert = useCallback(\n    data => {\n      // nextData관리\n      const nextData = {\n        id: nextId.current,\n        text: data,\n        option: option,\n        checked: false,\n      };\n\n      if (data.length === 0) {\n        alert('내용을 입력해주세요.');\n      } else {\n        setTodos(todos => todos.concat(nextData)); //todos에 nextData 추가\n        nextId.current += 1; //nextId에 1씩 추가\n      }\n    },\n    [option],\n  );\n\n  //데이터 삭제\n  const onRemove = useCallback(id => {\n    setTodos(todos => todos.filter(removeData => removeData.id !== id));\n  }, []);\n\n  //checkbox toggle\n  const onToggle = useCallback(id => {\n    setTodos(todos =>\n      todos.map(toggleData =>\n        toggleData.id === id\n          ? { ...toggleData, checked: !toggleData.checked }\n          : toggleData,\n      ),\n    );\n  }, []);\n\n  //데이터 수정\n  const onModify = useCallback((id, text) => {\n    setTodos(todos =>\n      todos.map(toggleData =>\n        toggleData.id === id ? { ...toggleData, text: text } : toggleData,\n      ),\n    );\n  }, []);\n\n  //데이터 검색\n  const [keyword, setKeyword] = useState('');\n  const onChange = e => {\n    setKeyword(e.target.value);\n  };\n\n  return (\n    <>\n      {/* <TodoHome /> */}\n\n      <TodoTemplate>\n        <TodoSearch value={keyword} onChange={onChange} />\n        <TodoInsert onInsert={onInsert} onSelect={onSelect} />\n\n        <TodoList\n          todos={todos.filter(data => data.text.indexOf(keyword) > -1)}\n          onModify={onModify}\n          onRemove={onRemove}\n          onToggle={onToggle}\n        />\n      </TodoTemplate>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}